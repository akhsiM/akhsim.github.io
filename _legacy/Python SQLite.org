#+TITLE:SQLite and how to use it in Python
#+DATE: <2020-04-19 Sun>
#+SETUPFILE: https://akhsim.github.io/read-akhsiM-orgs/theme-readtheorg-akhsiM.setup

* General

** About DBMSs
DBMSs or RDBMSs are different from databases. Databases are logically modelled clusters of information, or data. A DBMS on the other hand is a computer program that interacts with a database. A DBMS allows us to control access to a database, write data, run queries and perform any other tasks related to database management.

A database can be any collection of data, while a DBMS is the software tool that allows us to interact with a database.

All DBMSs have an underlying model that structures how data is stored and accessed. A RDBMS is a DBMS that employs the relational data model, in which data are organized into *tables*. In the context of RDBMS, *tables* are formally referred to as *relations*. A relation is a set of /tuples,/ or rows in a table, with each tuple/ row sharing a set of attributes, i.e columns.

[[./images/relation.png]]

Most relational databases use /structured query language/ (SQL) to manage and query data. However many RDBMSs use their own particular dialect of SQL, which may have certain limitation or extensions. These extensions normally come in the form of more complex operations that users can perform on top of what they otherwise could with standard SQL.

** What is standard SQL?

SQL standards are jointly maintained by the [[https://www.ansi.org/][American National Standards Institute]] (ANSI), The [[https://www.iso.org/home.html][International Organization for Standardization]] (ISO), and the [[https://www.iec.ch/][International Electrotechnical Comission]] (IEC). 

Standard SQL refers to the current version of SQL standards published by the above three bodies.

Full SQL Standard is large and complex. Full core SQL:2011 compliance requries 179 features. Due to this most RDBMSs don't support the entire standard, although some do come closer to full compliance than others.

** Columns

Each columns is assigned a /data type/ which dictates what kind of entries are allowed in that column. Different RDBMSs implement different data types which aren't always directly interchangeable. Some common data types include /dates, strings, integers, Booleans/. 

Numeric data types can be /signed/, meaning they can represent both positive and negative numbers, or /unsigned/, which means they can only represent positive numbers. 

** Constraints

Sometimes a DBA will impose a /constraints/ on a table to limite what values can be entered into it. A constraint typically applies to one particular column, but some constraints can be applied to an entire table. Here are some constraints that are commonly used in SQL:

- ~UNIQUE~: Applying this constraint to a column ensures that no two entries in that column are identical.
- ~NOT NULL~: This constraint ensures that a column doesn’t have any NULL entries.
- ~PRIMARY KEY~: A combination of UNIQUE and NOT NULL, the PRIMARY KEY constraint ensures that no entry in the column is NULL and that every entry is distinct.
- ~FOREIGN KEY~: A FOREIGN KEY is a column in one table that refers to the PRIMARY KEY of another table. This constraint is used to link two tables together: entries to the FOREIGN KEY column must already exist in the parent PRIMARY KEY column for the write process to succeed.
- ~CHECK~: This constraint limits the range of values that can be entered into a column. For example, if your application is intended only for residents of Alaska, you could add a CHECK constraint on a ZIP code column to only allow entries between 99501 and 99950.
- ~DEFAULT~: This provides a default value for a given column. Unless another value is specified, SQLite enters the default value automatically.
- ~INDEX~: Used to help retrieve data from a table more quickly, this constraint is similar to an index in a textbook: instead of having to review every entry in a table, a query only has to review entries from the indexed column to find the desired results.

** More

To learn more about DBMSs, visit: [[https://www.digitalocean.com/community/articles/understanding-sql-and-nosql-databases-and-different-database-models][Understanding SQL and NoSQL Databases and Different Database Models]]. 

* About SQLite

SQLite is part of the default Python library.

SQLite is one of the most widely implemented open-sourced Relational Database Management Systems (RDBMSs). The other being MySQL and PostgrreSQL.

SQLite is self-contained, file-based and fully open-source. It is known for its portability, reliablity and strong performance in low-memory environments. Its transactions are ACID-compliant even in cases where the system crashes or undergoes a power outage.

SQLite is described as a serverless databse. This means that with SQLite, any proicess that access the database reads from and writes to the database disk file directly, which is different to the traditional RDBMSs which are implemented as as server-client connection process in which programs communicate with the host server through an interprocess communication that relays requests. This simplifies SQLite's setup process since it eliminates the need to set up a server process. Likewise there is no configuration necessasry for programs that use SQLite database, all they need is access to the disk.

** Data Types

 SQLite's supported data types are listed below:

 | Data Types | Explanation                                                      |
 |------------+------------------------------------------------------------------|
 |    <c>     |                                                                  |
 |    null    | Includes any NULL values                                         |
 |  integer   | Signed integers, stored in 1, 2, 3, 4, 6 or 8 bytes depending on |
 |            | magnitude of value                                               |
 |    real    | Real numbers or floating point values, stored as 8-byte floating |
 |            | point numbers                                                    |
 |    text    | text strings stored usign database encoding which can either be  |
 |            | UTF-8, UTF-16BE or UTF-16LE                                      |
 |    blob    | any blob of data with every blob stored exactly as it was input  |

** Advantates versus disadvantages of SQLite

| Advantages                                          | Disadvantages                                                     |
|-----------------------------------------------------+-------------------------------------------------------------------|
| *Small footprint*: SQLite is very light-weight. It is | *Limited concurrency*: Although multiple process                    |
| also fully self-contained, so you don't need to     | can access and query an SQLite database at the same               |
| install any dependencies for it to work.            | time, *only one process can make changes to the database          |
|                                                     | at any given time*. This means although SQLite supports           |
| *User-friendly*: SQLite is a zero-configuration       | greater concurrency than most other embedeed DBMSs, this          |
| database which does not run as a server process.    | is not as much as client/ server RDBMSs like MySQL or             |
| It is ready to be used out of the box and help to   | PostgreSQL.                                                       |
| streamline the path from installing SQLite to       |                                                                   |
| integrating it with an application                  | *No user management*: Database systems often come with support      |
|                                                     | for /users/ or managed connections with predefined access           |
| *Portable*: Unlike other DBMSs, which typically store | privileges to the databases and tables. SQLite doesn't have this. |
| data as a large batch of seperate files. An entire  | The only applicable access permissions is Read/Write permissions, |
| SQLite database is stored in *a single file*.         | which are the typicall OS privilegse. This means SQLite is a poor |
|                                                     | choice for database applications that require multiple users with |
|                                                     | special access levels.                                            |
|                                                     |                                                                   |
|                                                     | *Security*: A database engine that uses a server can provide better |
|                                                     | protection from bugs in the client application than a serverless  |
|                                                     | database like SQLite. Moreover, because a server is a single      |
|                                                     | persistent process, a client-server database can control data     |
|                                                     | access with more precision than a serverless database, allowing   |
|                                                     | for more fine-grained locking and better concurrency.             |

** SQLites is suitable for..

    - Embedded applications: SQLite is a great choice of database for applications that need portability and don’t require future expansion. Examples include single-user local applications and mobile applications or games.
    - Disk access replacement: In cases where an application needs to read and write files to disk directly, it can be beneficial to use SQLite for the additional functionality and simplicity that comes with using SQL.
    - Testing: For many applications it can be overkill to test their functionality with a DBMS that uses an additional server process. SQLite has an in-memory mode which can be used to run tests quickly without the overhead of actual database operations, making it an ideal choice for testing.

** More

To read more about comparision between SQLite and MySQL and PostgreSQL, see: [[https://www.digitalocean.com/community/tutorials/sqlite-vs-mysql-vs-postgresql-a-comparison-of-relational-database-management-systems][SQLite vs MySQL vs PostgreSQL: A Comparison Of Relational Database Management Systems | DigitalOcean]].

* Using SQLite with Python

** Starting & Setup
Let's say that we want to create an application where we have Employees. We also want to have add/ update and delete Employees from the database, as well as being able to query Employees from that database.

We need to:
1. import sqlite3
2. create a database connection object
   - within the ~sqlite3.connect()~ method arguments, we can either pass in a file where our data is stored. We can even do an *in-memory* database like this: ~conn = sqlite3.connect(':memory:')~.

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

#+END_SRC

This creates a file in the current dir (note the file size 0 B right now):

#+begin_src bash
ls -la | grep *.db
#+end_src

#+RESULTS:
: -rw-r--r--  1 kkennynguyen kkennynguyen       0 Apr 20 00:16 employee.db

(If the file exists, sqlite3 will just connect to that database file.)
..then we have to create a cursor to execute SQL commands.

with a cursor, we can run commands using ~execute()~ method.

After running a command, we have to commit the connection. This commit the current transactions.

Afterward, it's good practice to close the connection.

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

#create a table Employees with Firstname, Lastname and Pay.
c.execute(""" 
	CREATE TABLE employees (
		first text,
		last text,
		pay integer
			)""")

conn.commit()
conn.close()
#+END_SRC

#+RESULTS:

After running the above script, a table has been created in the *employee.db* file. We the file again and see the size of the file has changed to 8192 B or 8 KB.

#+begin_src bash
ls -la | grep *.db
#+end_src

#+RESULTS:
: -rw-r--r--  1 kkennynguyen kkennynguyen    8192 Apr 20 00:25 employee.db

If I run the same script again, we would get an error because the table has already existed. This is good.

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

#create a table Employees with Firstname, Lastname and Pay.
c.execute(""" 
	CREATE TABLE employees (
		first text,
		last text,
		pay integer
			)""")

conn.commit()
conn.close()
#+END_SRC

#+RESULTS:
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
:   File "/tmp/babel-fwY7Nq/python-b2Eked", line 8, in <module>
:     c.execute(""" 
: sqlite3.OperationalError: table employees already exists

** Adding an employee

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

c.execute('INSERT INTO employees VALUES ("Kenny", "Nguyen", 50000)')

conn.commit()
conn.close()
#+END_SRC

#+RESULTS:

** Querying the database

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

c.execute('SELECT * FROM employees')

print(c.fetchall())

# Instead of fetchall we can also fetchone or fetchmany

conn.commit()
conn.close()
#+END_SRC

#+RESULTS:
: [('Kenny', 'Nguyen', 50000)]

What we did above is we retrieve data by running direct SQL commands. However in a real applications we want to have some Python variables and we want to put the values of these variables into the query.

** Working with a class

Create an entry using an instance of a class.

We can choose to use a formatted Python string for this, which is similar to something like ~c.execute("INSERT INTO employees VALUES ('{}', '{}', {})".format(emp1.first, emp1.last, emp1.pay))~. However this makes our program vulnerable to *SQL injection attack*.

The reason for that is doing SQL insert this way does not involve a proper escape.

There are two different ways:
1. Using the question marks as placeholders
2. Using a dictionary

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

class Employee:

	def __init__(self, first, last, pay):
		self.first = first
		self.last = last
		self.pay = pay

	@property
	def email(self):
		return '{}.{}@email.com'.format(self.first, self.last)

	@property
	def fullname(self):
		return '{} {}'.format(self.first, self.last)

	def __repr__(self):
		return "Employee ('{}', '{}', {})".format(self.first, self.last, self.pay)

conn = sqlite3.connect('employee.db')

c = conn.cursor()

emp1 = Employee('John', 'Smith', 80000)
emp2 = Employee('Jane', 'Lee', 80000)

# first way - question mark placeholder and a tuple
c.execute("INSERT INTO employees VALUES (?, ?, ?)", (emp1.first, emp1.last, emp1.pay))
conn.commit()

# second way - using a dictionary
c.execute('INSERT INTO employees VALUES (:first, :last, :pay)', {'first': emp2.first, 'last': emp2.last, 'pay': emp2.pay})
conn.commit()

conn.close()
#+END_SRC

#+RESULTS:
*Note*: Even if we are putting in one value, that has to be wrapped in a tuple (first way).

Now we can re-query it and there should be two new employee rows.
#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

c.execute('SELECT * FROM employees')

print(c.fetchall())

# Instead of fetchall we can also fetchone or fetchmany

conn.close()
#+END_SRC

#+RESULTS:
: [('Kenny', 'Nguyen', 50000), ('Jane', 'Lee', 80000), ('John', 'Smith', 80000)]

We can also use the two approaches in a SELECT statement, i.e avoiding direct SQL:
#+BEGIN_SRC python :exports both :results output :session
import sqlite3

conn = sqlite3.connect('employee.db')

c = conn.cursor()

# first way - question mark placeholder and a tuple
c1 = c.execute('SELECT * FROM employees WHERE last=?', ('Smith',))

print(c1.fetchall())

# second way - using a dictionary
c2 = c.execute('SELECT * FROM employees WHERE last=:last', {'last': 'Nguyen'})

print(c2.fetchall())

# Instead of fetchall we can also fetchone or fetchmany

conn.close()
#+END_SRC

#+RESULTS:
: [('John', 'Smith', 80000)]
: [('Kenny', 'Nguyen', 50000)]

** In-memory table

In-memory databases are useful for testing when we want a freshly cleaned database every run.

*** Intro

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

class Employee:

	def __init__(self, first, last, pay):
		self.first = first
		self.last = last
		self.pay = pay

	@property
	def email(self):
		return '{}.{}@email.com'.format(self.first, self.last)

	@property
	def fullname(self):
		return '{} {}'.format(self.first, self.last)

	def __repr__(self):
		return "Employee ('{}', '{}', {})".format(self.first, self.last, self.pay)

conn = sqlite3.connect(':memory:')
c = conn.cursor()

c.execute(""" 
	CREATE TABLE employees (
		first text,
		last text,
		pay integer
			)""")

emp1 = Employee('John', 'Smith', 80000)
emp2 = Employee('Jane', 'Lee', 80000)

# raw sql
c.execute('INSERT INTO employees VALUES ("Kenny", "Nguyen", 50000)')

# first way - question mark placeholder and a tuple
c.execute("INSERT INTO employees VALUES (?, ?, ?)", (emp1.first, emp1.last, emp1.pay))


# second way - using a dictionary
c.execute('INSERT INTO employees VALUES (:first, :last, :pay)', {'first': emp2.first, 'last': emp2.last, 'pay': emp2.pay})

conn.commit()

c.execute('SELECT * FROM employees')
print(c.fetchall())

conn.close()
#+END_SRC

#+RESULTS:
: [('Kenny', 'Nguyen', 50000), ('John', 'Smith', 80000), ('Jane', 'Lee', 80000)]

*** Using in-mem database to prototype a basic Python application

Tips: To make our application more Pythonic, when handling database connection in Python, use *context manger*, instead of manually commiting each statement. This is applicable to write statements, read statements aren't needed to be commited.

This ensures that if the transactions isn't executed properly, it would be rolled back.

#+BEGIN_SRC python :exports both :results output :session
import sqlite3

class Employee:

	def __init__(self, first, last, pay):
		self.first = first
		self.last = last
		self.pay = pay

	@property
	def email(self):
		return '{}.{}@email.com'.format(self.first, self.last)

	@property
	def fullname(self):
		return '{} {}'.format(self.first, self.last)

	def __repr__(self):
		return "Employee ('{}', '{}', {})".format(self.first, self.last, self.pay)

conn = sqlite3.connect(':memory:')
c = conn.cursor()

c.execute(""" 
	CREATE TABLE employees (
		first text,
		last text,
		pay integer
			)""")

def insert_emp(emp):
	with conn:
		c.execute("INSERT INTO employees VALUES (:first, :last, :pay)", {'first': emp.first, 'last': emp.last, 'pay': emp.pay})

def get_emps_by_name(lastname):
	c.execute("SELECT * FROM employees WHERE last=:last", {'last': lastname})
	return c.fetchall()

def update_pay(emp, pay):
	with conn:
		c.execute("""
			UPDATE employees SET pay = :pay
			WHERE first = :first AND last = :last	
	""", {'first': emp.first, 'last': emp.last, 'pay': pay})		
	
def remove_emp(emp):
	with conn:
		c.execute("""
		DELETE FROM employees
		WHERE first = :first and last = :last 
	""", {'first': emp.first, 'last': emp.last})


emp1 = Employee('Kenny', 'Nguyen', 50000)
print('emp1:', emp1)
emp2 = Employee('John', 'Smith', 60000)
print('emp2:', emp2)

# Run 1
print('Run 1.. insert and select emp1')
insert_emp(emp1)
print(get_emps_by_name('Nguyen'))

# Run 2
print('Run 2.. insert and select emp2')
insert_emp(emp2)
print(get_emps_by_name('Smith'))

# Run 3
print('Run 3.. remove and select emp2')
remove_emp(emp2)
print(get_emps_by_name('Smith'))

# Run 4
print('Run 4.. change pay for emp1')
print('before:', get_emps_by_name('Nguyen'))
update_pay(emp1, 100000)
print('after:', get_emps_by_name('Nguyen'))


#+END_SRC

#+RESULTS:
#+begin_example
emp1: Employee ('Kenny', 'Nguyen', 50000)
emp2: Employee ('John', 'Smith', 60000)
Run 1.. insert and select emp1
[('Kenny', 'Nguyen', 50000)]
Run 2.. insert and select emp2
[('John', 'Smith', 60000)]
Run 3.. remove and select emp2
[]
Run 4.. change pay for emp1
before: [('Kenny', 'Nguyen', 50000)]
after: [('Kenny', 'Nguyen', 100000)]
#+end_example
